use anyhow::bail;

use crate::compiler::chunk::Chunk;

use super::str::ZIdent;

#[derive(Debug, Default, Clone)]
pub enum Func {
    #[default]
    NoOp,
    Script {
        chunk: Chunk,
    },
    Fn {
        arity: u8,
        chunk: Chunk,
        name: ZIdent,
    },
}
macro_rules! chunk_mut {
    ($func: ident) => {{
        {
            match &mut $func {
                Func::NoOp => None,
                Func::Script { chunk, .. } => Some(chunk),
                Func::Fn { chunk, .. } => Some(chunk),
            }
        }
    }};
}

impl Func {
    pub const MAX_ARITY: u8 = u8::MAX;

    pub const fn script(chunk: Chunk) -> Self {
        Self::Script { chunk }
    }
    pub const fn function(name: ZIdent, arity: u8, chunk: Chunk) -> Self {
        Self::Fn { arity, chunk, name }
    }

    pub const fn zeroed() -> Self {
        Self::NoOp
    }

    pub fn try_into_script(self) -> anyhow::Result<Self> {
        match self {
            Func::NoOp => bail!("Cannot cast Func::NoOp into Func::Script!!!"),
            x @ Func::Script { .. } => Ok(x),
            Func::Fn { chunk, .. } => Ok(Self::Script { chunk }),
        }
    }

    pub fn try_into_fn(self, name: &str) -> anyhow::Result<Self> {
        match self {
            Func::NoOp => bail!("Cannot cast Func::NoOp into Func::Script!!!"),
            Func::Script { chunk } => Ok(Self::Fn {
                arity: 0,
                chunk,
                name: ZIdent::from(name),
            }),
            x @ Func::Fn { .. } => Ok(x),
        }
    }

    pub const fn chunk(&self) -> Option<&Chunk> {
        match self {
            Func::NoOp => None,
            Func::Script { chunk, .. } => Some(chunk),
            Func::Fn { chunk, .. } => Some(chunk),
        }
    }

    pub const fn arity(&self) -> usize {
        match self {
            Func::NoOp => 0,
            Func::Script { .. } => 0xDEADBEEFusize,
            Func::Fn { arity, .. } => *arity as usize,
        }
    }

    #[inline]
    pub fn name(&self) -> &str {
        match self {
            Func::NoOp => "NoOp",
            Func::Script { .. } => "Func::Script",
            Func::Fn { name, .. } => name.string(),
        }
    }
}
